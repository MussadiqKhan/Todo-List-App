{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","storedTodo","JSON","parse","localStorage","getItem","_useState","useState","_useState2","Object","slicedToArray","todo","setTodo","_useState3","_useState4","message","setMessage","useEffect","setItem","stringify","delItem","e","del","filter","target","value","console","log","react_default","a","createElement","className","type","id","placeholder","onClick","texts","document","querySelector","trim","includes","concat","toConsumableArray","scope","map","data","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OA0FeA,MAvFf,WACE,IAAIC,EAAaC,KAAKC,MAAMC,aAAaC,QAAQ,SADpCC,EAGSC,mBAASN,GAHlBO,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGRK,EAHQH,EAAA,GAGFI,EAHEJ,EAAA,GAAAK,EAIiBN,mBAAS,IAJ1BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAINE,EAJMD,EAAA,GAIGE,EAJHF,EAAA,GAMbG,oBAAU,WACRb,aAAac,QAAQ,OAAQhB,KAAKiB,UAAUR,KAC3C,CAACA,IAEJ,IAaMS,EAAU,SAAAC,GACd,IAAIC,EAAMX,EAAKY,OAAO,SAAAZ,GACpB,OAAOA,IAASU,EAAEG,OAAOC,QAE3Bb,EAAQU,IAGV,OADAI,QAAQC,IAAIhB,GAEViB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLC,GAAG,YACHF,UAAU,gBACVG,YAAY,qBAEdN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,0BAA0BI,QAjClC,WAClB,IAAIC,EAAQC,SAASC,cAAc,cAAcb,MAAMc,OAC1C5B,EAAK6B,SAASJ,IAEzBpB,EAAW,gCACXqB,SAASC,cAAc,cAAcb,MAAQ,KAE7CT,EAAW,IACXJ,EAAQ,SAAAD,GAAI,SAAA8B,OAAAhC,OAAAiC,EAAA,EAAAjC,CAAQE,GAAR,CAAcyB,MAC1BC,SAASC,cAAc,cAAcb,MAAQ,MAwBvC,eAMNG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,8BAA8BhB,KAG/Ca,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BAEfH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,2EACfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIa,MAAM,QAAV,QACAf,EAAAC,EAAAC,cAAA,MAAIa,MAAM,OAAV,YAIHhC,EAAKiC,IAAI,SAAAC,GAAI,OACZjB,EAAAC,EAAAC,cAAA,MAAIgB,IAAKD,GACPjB,EAAAC,EAAAC,cAAA,UAAKe,GACLjB,EAAAC,EAAAC,cAAA,UACG,IACDF,EAAAC,EAAAC,cAAA,UACEC,UAAU,iBACVN,MAAOoB,EACPV,QAASf,GAHX,kBC9DI2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASjB,SAASkB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8da8760e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  var storedTodo = JSON.parse(localStorage.getItem(\"todo\")); //geting from localstorage\n\n  let [todo, setTodo] = useState(storedTodo);\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    localStorage.setItem(\"todo\", JSON.stringify(todo));\n  }, [todo]); //saving in local storage\n\n  const handleInput = () => {\n    let texts = document.querySelector(\"#noteinput\").value.trim();\n    let inList = todo.includes(texts);\n    if (inList) {\n      setMessage(\"Task is already in todo list\");\n      document.querySelector(\"#noteinput\").value = \"\";\n    } else {\n      setMessage(\"\");\n      setTodo(todo => [...todo, texts]);\n      document.querySelector(\"#noteinput\").value = \"\";\n    }\n  };\n\n  const delItem = e => {\n    let del = todo.filter(todo => {\n      return todo !== e.target.value;\n    });\n    setTodo(del);\n  }; //filter function takes my array and return all items which are not equal to e.target.value\n  console.log(todo);\n  return (\n    <div className=\"App container-fluid\">\n      <div className=\"row mt-5\" />\n      <div className=\"row\">\n        <div className=\"col-lg-4 col-md-2\" />\n        <div className=\"input-group col-lg-4 col-md-7 col-sm-3 col-xs-4 \">\n          <input\n            type=\"text\"\n            id=\"noteinput\"\n            className=\"form-control \"\n            placeholder=\"Enter a new note\"\n          />\n          <div className=\"input-group-append\">\n            <button className=\"btn btn-outline-success\" onClick={handleInput}>\n              Add note\n            </button>\n          </div>\n        </div>\n      </div>\n      <div className=\"row mt-5\">\n        <div className=\"col-lg-5 col-md-2 col-sm-1 \" />\n        <div className=\"col-lg-3 col-md-2 col-sm-1 \">\n          <p className=\"message text-danger center\">{message}</p>\n        </div>\n      </div>\n      <div className=\"row mt-2\">\n        <div className=\"col-lg-3 col-md-2 col-sm-1\" />\n\n        <table className=\"table table-borderless col-lg-8 col-md-9 md-offset-2 col-sm-7 col-xs-4 \">\n          <thead>\n            <tr>\n              <th scope=\"col \">Task</th>\n              <th scope=\"col\">Action</th>\n            </tr>\n          </thead>\n\n          {todo.map(data => (\n            <tr key={data}>\n              <td>{data}</td>\n              <td>\n                {\" \"}\n                <button\n                  className=\"btn btn-danger\"\n                  value={data}\n                  onClick={delItem}\n                >\n                  Remove\n                </button>\n              </td>\n            </tr>\n          ))}\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}